###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         30/Nov/2018  01:14:57 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\课堂练习数据传输\Texas                          #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\Coordinator.c      #
#    Command line       =  -f "D:\课堂练习数据传输\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wCoord.cfg" (-DCPU32MHZ                    #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg" (-DSECURE=0                   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\Coordinator.c" -D  #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\CoordinatorEB\List #
#                          \" -lA "D:\课堂练习数据传输\Texas                  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\CoordinatorEB\List #
#                          \" --diag_suppress Pe001,Pa010 -o                  #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ #
#                          " -e --debug --core=plain --dptr=16,1              #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\课堂练习数据传输\Texas                      #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\" -I               #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\SOURCE\" -I     #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\ZMAIN\TI2 #
#                          530DB\" -I "D:\课堂练习数据传输\Texas              #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MT\" -I "D:\课堂练习数据传输\Texas         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\HAL\INCLUDE\" -I                           #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\HAL\TARGET\CC2530EB\" -I                   #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\OSAL\MCU\CCSOC\" -I                        #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\OSAL\INCLUDE\" -I                          #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\AF\" -I "D:\课堂练习数据传输\Texas   #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\NWK\" -I "D:\课堂练习数据传输\Texas  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\SEC\" -I "D:\课堂练习数据传输\Texas  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\STACK\SAPI\" -I "D:\课堂练习数据传输\Texas #
#                           Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\STACK\SYS\" -I "D:\课堂练习数据传输\Texas #
#                           Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\STACK\ZDO\" -I "D:\课堂练习数据传输\Texas #
#                           Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\ZMAC\F8W\" -I "D:\课堂练习数据传输\Texas  #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\ZMAC\" -I "D:\课堂练习数据传输\Texas       #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SADDR\" -I                        #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SDATA\" -I                        #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\INCLUDE\" -I                           #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\HIGH_LEVEL\" -I                        #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\LOW_LEVEL\srf04\" -I                   #
#                          "D:\课堂练习数据传输\Texas                         #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz     #
#                          --require_prototypes                               #
#    List file          =  D:\课堂练习数据传输\Texas                          #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\CoordinatorEB\List #
#                          \Coordinator.lst                                   #
#    Object file        =  D:\课堂练习数据传输\Texas                          #
#                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\CoordinatorEB\Obj\ #
#                          Coordinator.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\课堂练习数据传输\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530DB\Coordinator.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          
      7          #include "Coordinator.h"
      8          #include "DebugTrace.h"
      9          
     10          #if !defined( WIN32 )
     11            #include "OnBoard.h"
     12          #endif
     13          
     14          /* HAL */
     15          #include "hal_lcd.h"
     16          #include "hal_led.h"
     17          #include "hal_key.h"
     18          #include "hal_uart.h"
     19          

   \                                 In  segment XDATA_ROM_C, align 1
     20          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
     21          {
     22            GENERICAPP_CLUSTERID
     23          };
     24          

   \                                 In  segment XDATA_ROM_C, align 1
     25          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
     26          {
     27            GENERICAPP_ENDPOINT,              //  int Endpoint;
     28            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
     29            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     30            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     31            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
     32            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     33            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
     34            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     35            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
     36          };
     37          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     39          
     40           

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42                                    // This variable will be received when
     43                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     44          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     45          
     46          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     47          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     48          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     49          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     50          
     51          /*********************************************************************
     52           * LOCAL FUNCTIONS
     53           */
     54          //void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
     55          //void GenericApp_HandleKeys( byte shift, byte keys );
     56          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     57          void GenericApp_SendTheMessage( void );
     58          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
     60          {  halUARTCfg_t uartConfig;
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
     61            GenericApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
     62            GenericApp_NwkState = DEV_INIT;
   \   00000F   90....       MOV     DPTR,#GenericApp_NwkState
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
     63            GenericApp_TransID = 0;
   \   000015   90....       MOV     DPTR,#GenericApp_TransID
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
     64          /*  
     65            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
     66            GenericApp_DstAddr.endPoint = 0;
     67            GenericApp_DstAddr.addr.shortAddr = 0;*/
     68          
     69           
     70            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   00001A   90....       MOV     DPTR,#GenericApp_epDesc
   \   00001D   740A         MOV     A,#0xa
   \   00001F   F0           MOVX    @DPTR,A
     71            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000027   F0           MOVX    @DPTR,A
     72            GenericApp_epDesc.simpleDesc
     73                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000028   A3           INC     DPTR
   \   000029   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00002F   F0           MOVX    @DPTR,A
     74            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   000030   A3           INC     DPTR
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
     75          
     76            // Register the endpoint description with the AF
     77            afRegister( &GenericApp_epDesc );
   \   000033                ; Setup parameters for call to function afRegister
   \   000033   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000035   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000037   12....       LCALL   ??afRegister?relay
     78            uartConfig.configured   =TRUE;
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
     79            uartConfig.baudRate     =HAL_UART_BR_115200;
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   7404         MOV     A,#0x4
   \   000048   F0           MOVX    @DPTR,A
     80            uartConfig.flowControl  =FALSE;
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
     81            HalUARTOpen(0,&uartConfig);
   \   000050                ; Setup parameters for call to function HalUARTOpen
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   AA82         MOV     R2,DPL
   \   000058   AB83         MOV     R3,DPH
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??HalUARTOpen?relay
     82          }
   \   00005E   741D         MOV     A,#0x1d
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   7F01         MOV     R7,#0x1
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
     83          
     84          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
     86          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     87            afIncomingMSGPacket_t *MSGpkt;
     88            
     89          
     90            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6036         JZ      ??GenericApp_ProcessEvent_0
     91            {
     92              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8017         SJMP    ??GenericApp_ProcessEvent_1
     93              while ( MSGpkt )
     94              {
     95                switch ( MSGpkt->hdr.event )
   \                     ??GenericApp_ProcessEvent_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   641A         XRL     A,#0x1a
   \   000017   7007         JNZ     ??GenericApp_ProcessEvent_3
     96                {
     97                  /*case ZDO_CB_MSG:
     98                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
     99                    break;
    100                    
    101                  case KEY_CHANGE:
    102                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    103                    break;
    104          
    105                  case AF_DATA_CONFIRM_CMD:
    106                    // This message is received as a confirmation of a data packet sent.
    107                    // The status is of ZStatus_t type [defined in ZComDef.h]
    108                    // The message fields are defined in AF.h
    109                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    110                    sentEP = afDataConfirm->endpoint;
    111                    sentStatus = afDataConfirm->hdr.status;
    112                    sentTransID = afDataConfirm->transID;
    113                    (void)sentEP;
    114                    (void)sentTransID;
    115          
    116                    // Action taken when confirmation is received.
    117                    if ( sentStatus != ZSuccess )
    118                    {
    119                      // The data wasn't delivered -- Do something
    120                    }
    121                    break;*/
    122          
    123                  case AF_INCOMING_MSG_CMD:
    124                    GenericApp_MessageMSGCB( MSGpkt );
   \   000019                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??GenericApp_MessageMSGCB?relay
    125                    break;
    126          
    127                  /*case ZDO_STATE_CHANGE:
    128                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    129                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    130                        || (GenericApp_NwkState == DEV_ROUTER)
    131                        || (GenericApp_NwkState == DEV_END_DEVICE) )
    132                    {  
    133                      // Start sending "the" message in a regular interval.
    134                      osal_start_timerEx( GenericApp_TaskID,
    135                                          GENERICAPP_SEND_MSG_EVT,
    136                                        GENERICAPP_SEND_MSG_TIMEOUT );
    137                    }
    138                    break;*/
    139          
    140                  default:
    141                    break;
    142                }
    143          
    144                // Release the memory
    145                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000020                ; Setup parameters for call to function osal_msg_deallocate
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??osal_msg_deallocate?relay
    146          
    147                // Next
    148                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000027                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000027   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??osal_msg_receive?relay
   \   00002F   8A..         MOV     ?V0 + 2,R2
   \   000031   8B..         MOV     ?V0 + 3,R3
   \   000033   AE..         MOV     R6,?V0 + 2
   \   000035   AF..         MOV     R7,?V0 + 3
    149              }
   \   000037   EE           MOV     A,R6
   \   000038   4F           ORL     A,R7
   \   000039   70D5         JNZ     ??GenericApp_ProcessEvent_2
    150          
    151              // return unprocessed events
    152              return (events ^ SYS_EVENT_MSG);
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   6480         XRL     A,#0x80
   \   000041   FB           MOV     R3,A
   \   000042   8004         SJMP    ??GenericApp_ProcessEvent_4
    153            }
    154          
    155            // Send a message out - This event is generated by a timer
    156            //  (setup in GenericApp_Init()).
    157           /* if ( events & GENERICAPP_SEND_MSG_EVT )
    158            {
    159              // Send "the" message
    160              GenericApp_SendTheMessage();
    161          
    162              // Setup to send message again
    163              osal_start_timerEx( GenericApp_TaskID,
    164                                  GENERICAPP_SEND_MSG_EVT,
    165                                GENERICAPP_SEND_MSG_TIMEOUT );
    166          
    167              // return unprocessed events
    168              return (events ^ GENERICAPP_SEND_MSG_EVT);
    169            }
    170          
    171            // Discard unknown events*/
    172            return 0;
   \                     ??GenericApp_ProcessEvent_0:
   \   000044   7A00         MOV     R2,#0x0
   \   000046   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_4:
   \   000048   7F04         MOV     R7,#0x4
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
    173          }
    174          
    175          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    177          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    178            unsigned char buffer[4]="    ";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "    ">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "    ">` & 0xff
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    179            switch ( pkt->clusterId )
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   00002E   7075         JNZ     ??GenericApp_MessageMSGCB_1
    180            {
    181              case GENERICAPP_CLUSTERID:
    182                osal_memcpy(buffer,pkt->cmd.Data,3);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   EA           MOV     A,R2
   \   000031   2421         ADD     A,#0x21
   \   000033   F582         MOV     DPL,A
   \   000035   EB           MOV     A,R3
   \   000036   3400         ADDC    A,#0x0
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 1,A
   \   000041   75..00       MOV     ?V0 + 2,#0x0
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000049   7C03         MOV     R4,#0x3
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   EC           MOV     A,R4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   12....       LCALL   ??osal_memcpy?relay
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
    183                if((buffer[0]=='L')||(buffer[1]=='E')||(buffer[2]=='D'))
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   644C         XRL     A,#0x4c
   \   000066   6014         JZ      ??GenericApp_MessageMSGCB_2
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   6445         XRL     A,#0x45
   \   000070   600A         JZ      ??GenericApp_MessageMSGCB_2
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6444         XRL     A,#0x44
   \   00007A   7022         JNZ     ??GenericApp_MessageMSGCB_3
    184                {HalLedBlink(HAL_LED_2,0,50,500);
   \                     ??GenericApp_MessageMSGCB_2:
   \   00007C                ; Setup parameters for call to function HalLedBlink
   \   00007C   7CF4         MOV     R4,#-0xc
   \   00007E   7D01         MOV     R5,#0x1
   \   000080   7B32         MOV     R3,#0x32
   \   000082   7A00         MOV     R2,#0x0
   \   000084   7902         MOV     R1,#0x2
   \   000086   12....       LCALL   ??HalLedBlink?relay
    185                HalUARTWrite(0,buffer,4);
   \   000089                ; Setup parameters for call to function HalUARTWrite
   \   000089   7C04         MOV     R4,#0x4
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   AA82         MOV     R2,DPL
   \   000095   AB83         MOV     R3,DPH
   \   000097   7900         MOV     R1,#0x0
   \   000099   12....       LCALL   ??HalUARTWrite?relay
   \   00009C   8007         SJMP    ??GenericApp_MessageMSGCB_1
    186                }
    187                else
    188                {
    189                  HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);
   \                     ??GenericApp_MessageMSGCB_3:
   \   00009E                ; Setup parameters for call to function HalLedSet
   \   00009E   7A01         MOV     R2,#0x1
   \   0000A0   7902         MOV     R1,#0x2
   \   0000A2   12....       LCALL   ??HalLedSet?relay
    190                }
    191                break;
    192            }
    193          }
   \                     ??GenericApp_MessageMSGCB_1:
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA   7F03         MOV     R7,#0x3
   \   0000AC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "    ">`:
   \   000000   20202020     DB 20H, 20H, 20H, 20H
    194          
    195          

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     GenericApp_Init                  0      0     38
       -> afRegister                  0      0     76
       -> HalUARTOpen                 0      0     76
     GenericApp_MessageMSGCB          2      0     30
       -> osal_memcpy                 0      0     36
       -> HalLedBlink                 0      0     30
       -> HalUARTWrite                0      0     30
       -> HalLedSet                   0      0     30
     GenericApp_ProcessEvent          0      0     12
       -> osal_msg_receive            0      0     24
       -> GenericApp_MessageMSGCB     0      0     24
       -> osal_msg_deallocate         0      0     24
       -> osal_msg_receive            0      0     24


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     GenericApp_ClusterList             2
     GenericApp_SimpleDesc             12
     GenericApp_epDesc                  6
     GenericApp_TaskID                  1
     GenericApp_NwkState                1
     GenericApp_TransID                 1
     GenericApp_DstAddr                12
     GenericApp_Init                  104
     GenericApp_ProcessEvent           77
     GenericApp_MessageMSGCB          175
     ??GenericApp_Init?relay            6
     ??GenericApp_ProcessEvent?relay    6
     ??GenericApp_MessageMSGCB?relay    6
     ?<Constant "    ">                 4

 
 356 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  18 bytes in segment XDATA_ROM_C
  21 bytes in segment XDATA_Z
 
 374 bytes of CODE  memory
  18 bytes of CONST memory
  21 bytes of XDATA memory

Errors: none
Warnings: none
